extends CharacterBody3D

#region Player Nodes
@onready var head = $head
@onready var standing_collision = $standing_collision
@onready var crouching_collision = $crouching_collision
@onready var above_head_cast = $above_head_cast

#endregion

#region Speed Variables
var current_speed = 5.0
const WALKING_SPEED = 5.0
const SPRINTING_SPEED = 8.0
const CROUCHING_SPEED = 3.0
#endregion

#region Input Variable
const MOUSE_SENSETIVITY = 0.2
var direction = Vector3.ZERO
#endregion

#region Movement Variables
const JUMP_VELOCITY = 4.5
var crouching_height = 1.3
var gravity = ProjectSettings.get_setting("physics/3d/default_gravity")
var lerp_speed = 10.0
#endregion

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _input(event):
	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(-event.relative.x * MOUSE_SENSETIVITY))
		head.rotate_x(deg_to_rad(-event.relative.y * MOUSE_SENSETIVITY))
		head.rotation.x = clamp(head.rotation.x,deg_to_rad(- 89),deg_to_rad(89))

func _unhandled_input(event):
	if Input.is_action_just_pressed("ui_cancel"):
		get_tree().quit()

func _physics_process(delta):
	if Input.is_action_pressed("crouch"):
		current_speed = CROUCHING_SPEED
		head.position.y = lerp(head.position.y, crouching_height, delta * lerp_speed)
		standing_collision.disabled = true
		crouching_collision.disabled = false
	elif !above_head_cast.is_colliding():
		standing_collision.disabled = false
		crouching_collision.disabled = true
		head.position.y = lerp(head.position.y, 1.8, delta * lerp_speed)

		if !Input.is_action_pressed("backward"):
			if is_on_floor():
				if Input.is_action_pressed("sprint"):
					current_speed = SPRINTING_SPEED
				else:
					current_speed = WALKING_SPEED
	
	# Add the gravity.
	if !is_on_floor():
		velocity.y -= gravity * delta

	# Jump
	if Input.is_action_just_pressed("jump") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	var input_dir = Input.get_vector("left", "right", "forward", "backward")
	direction = lerp(direction,(transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized(),delta * lerp_speed)
	if direction:
		velocity.x = direction.x * current_speed
		velocity.z = direction.z * current_speed
	else:
		velocity.x = move_toward(velocity.x, 0, current_speed)
		velocity.z = move_toward(velocity.z, 0, current_speed)

	move_and_slide()
